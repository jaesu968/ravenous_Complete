{"ast":null,"code":"// this is the file that will handle the Yelp API requests\n// it is a module that will retrieve businness listings form the Yelp API using a search function\n// store the api key in a variable \nconst apiKey = 'sOjGj-S40_aTEYkazkpSYHTTmRLfpBt5-0KjEj-PfUdK4ja63fak9LHNTidky9h8RL16ifxZv9wzuWf_3LNQyVuiYAQvh5wPgoEeMRl2tbvBk4lkEquThgXh9msCaHYx';\n// base url for the Yelp API\nconst baseURL = 'https://api.yelp.com/v3/businesses/search';\n// create a function to make a request to the Yelp API\n// this function will take in the search term, location term, and sort by option\n// and return a promise that resolves to the response from the API\n// this function will be used in the SearchBar component\n// to make a request to the Yelp API\n// this function will be called when the user clicks the search button\n// should retrieve business listings based on the search term, location term, and sort by option\n// should send a GET request to the Yelp API and process the response to extract relevant information about each business\n// also the function should resolve to an array of business objects with the information retreived from the response\n\nconst searchYelp = async (searchTerm, locationTerm, sortBy) => {\n  try {\n    // check if the search term and location term are not empty\n    if (!searchTerm || !locationTerm) {\n      throw new Error('Search term and location term are required');\n    }\n    // check if the sort by option is valid\n    const validSortByOptions = ['best_match', 'rating', 'review_count', 'distance'];\n    if (!validSortByOptions.includes(sortBy)) {\n      throw new Error('Invalid sort by option');\n    }\n    // construct the URL for the API request\n    const url = `${baseURL}?term=${encodeURIComponent(searchTerm)}&location=${encodeURIComponent(locationTerm)}&sort_by=${sortBy}`;\n    // set the headers for the API request\n    const headers = {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    };\n    // make the API request using fetch\n    // check if the response is ok\n    // if not, throw an error with the status code and message\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    // if the response is ok, parse the response as JSON\n    const data = await response.json();\n    // check if the data is valid\n    if (!data.businesses) {\n      return [];\n    }\n    // return the businesses from the response\n    return data.businesses.map(business => {\n      var _business$categories$;\n      return {\n        id: business.id,\n        imageSrc: business.image_url,\n        name: business.name,\n        address: business.location.address1,\n        city: business.location.city,\n        state: business.location.state,\n        zipCode: business.location.zip_code,\n        category: ((_business$categories$ = business.categories[0]) === null || _business$categories$ === void 0 ? void 0 : _business$categories$.title) || '',\n        rating: business.rating,\n        reviewCount: business.review_count\n      };\n    });\n    // catch any errors and log them to the console\n  } catch (error) {\n    console.error('Error fetching data from Yelp API:', error);\n    throw error; // Re-throw the error so the component can handle it\n  }\n};\n\nexport default searchYelp;","map":{"version":3,"names":["apiKey","baseURL","searchYelp","searchTerm","locationTerm","sortBy","Error","validSortByOptions","includes","url","encodeURIComponent","headers","Authorization","response","fetch","ok","status","data","json","businesses","map","business","_business$categories$","id","imageSrc","image_url","name","address","location","address1","city","state","zipCode","zip_code","category","categories","title","rating","reviewCount","review_count","error","console"],"sources":["/Users/jaesu/VSCode_Websites/ravenous_Complete/src/utils/YelpAPI.js"],"sourcesContent":["// this is the file that will handle the Yelp API requests\n// it is a module that will retrieve businness listings form the Yelp API using a search function\n// store the api key in a variable \nconst apiKey = 'sOjGj-S40_aTEYkazkpSYHTTmRLfpBt5-0KjEj-PfUdK4ja63fak9LHNTidky9h8RL16ifxZv9wzuWf_3LNQyVuiYAQvh5wPgoEeMRl2tbvBk4lkEquThgXh9msCaHYx';\n// base url for the Yelp API\nconst baseURL = 'https://api.yelp.com/v3/businesses/search';\n// create a function to make a request to the Yelp API\n// this function will take in the search term, location term, and sort by option\n// and return a promise that resolves to the response from the API\n// this function will be used in the SearchBar component\n// to make a request to the Yelp API\n// this function will be called when the user clicks the search button\n// should retrieve business listings based on the search term, location term, and sort by option\n// should send a GET request to the Yelp API and process the response to extract relevant information about each business\n// also the function should resolve to an array of business objects with the information retreived from the response\n\nconst searchYelp = async (searchTerm, locationTerm, sortBy) => {\n  try {\n    // check if the search term and location term are not empty\n    if (!searchTerm || !locationTerm) {\n      throw new Error('Search term and location term are required');\n    }\n    // check if the sort by option is valid\n    const validSortByOptions = ['best_match', 'rating', 'review_count', 'distance'];\n    if (!validSortByOptions.includes(sortBy)) {\n      throw new Error('Invalid sort by option');\n    }\n    // construct the URL for the API request\n    const url = `${baseURL}?term=${encodeURIComponent(searchTerm)}&location=${encodeURIComponent(locationTerm)}&sort_by=${sortBy}`;\n    // set the headers for the API request\n    const headers = {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    };\n    // make the API request using fetch\n    // check if the response is ok\n    // if not, throw an error with the status code and message\n    const response = await fetch(url, { headers });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    // if the response is ok, parse the response as JSON\n    const data = await response.json();\n    // check if the data is valid\n    if (!data.businesses) {\n      return [];\n    }\n    // return the businesses from the response\n    return data.businesses.map((business) => ({\n      id: business.id,\n      imageSrc: business.image_url,\n      name: business.name,\n      address: business.location.address1,\n      city: business.location.city,\n      state: business.location.state,\n      zipCode: business.location.zip_code,\n      category: business.categories[0]?.title || '',\n      rating: business.rating,\n      reviewCount: business.review_count\n    }));\n    // catch any errors and log them to the console\n  } catch (error) {\n    console.error('Error fetching data from Yelp API:', error);\n    throw error; // Re-throw the error so the component can handle it\n  }\n};\n\nexport default searchYelp;\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,MAAM,GAAG,kIAAkI;AACjJ;AACA,MAAMC,OAAO,GAAG,2CAA2C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,UAAU,EAAEC,YAAY,EAAEC,MAAM,KAAK;EAC7D,IAAI;IACF;IACA,IAAI,CAACF,UAAU,IAAI,CAACC,YAAY,EAAE;MAChC,MAAM,IAAIE,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IACA;IACA,MAAMC,kBAAkB,GAAG,CAAC,YAAY,EAAE,QAAQ,EAAE,cAAc,EAAE,UAAU,CAAC;IAC/E,IAAI,CAACA,kBAAkB,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MACxC,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA;IACA,MAAMG,GAAG,GAAI,GAAER,OAAQ,SAAQS,kBAAkB,CAACP,UAAU,CAAE,aAAYO,kBAAkB,CAACN,YAAY,CAAE,YAAWC,MAAO,EAAC;IAC9H;IACA,MAAMM,OAAO,GAAG;MACdC,aAAa,EAAG,UAASZ,MAAO,EAAC;MACjC,cAAc,EAAE;IAClB,CAAC;IACD;IACA;IACA;IACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;MAAEE;IAAQ,CAAC,CAAC;IAE9C,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIT,KAAK,CAAE,uBAAsBO,QAAQ,CAACG,MAAO,EAAC,CAAC;IAC3D;IACA;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;IAClC;IACA,IAAI,CAACD,IAAI,CAACE,UAAU,EAAE;MACpB,OAAO,EAAE;IACX;IACA;IACA,OAAOF,IAAI,CAACE,UAAU,CAACC,GAAG,CAAEC,QAAQ;MAAA,IAAAC,qBAAA;MAAA,OAAM;QACxCC,EAAE,EAAEF,QAAQ,CAACE,EAAE;QACfC,QAAQ,EAAEH,QAAQ,CAACI,SAAS;QAC5BC,IAAI,EAAEL,QAAQ,CAACK,IAAI;QACnBC,OAAO,EAAEN,QAAQ,CAACO,QAAQ,CAACC,QAAQ;QACnCC,IAAI,EAAET,QAAQ,CAACO,QAAQ,CAACE,IAAI;QAC5BC,KAAK,EAAEV,QAAQ,CAACO,QAAQ,CAACG,KAAK;QAC9BC,OAAO,EAAEX,QAAQ,CAACO,QAAQ,CAACK,QAAQ;QACnCC,QAAQ,EAAE,EAAAZ,qBAAA,GAAAD,QAAQ,CAACc,UAAU,CAAC,CAAC,CAAC,cAAAb,qBAAA,uBAAtBA,qBAAA,CAAwBc,KAAK,KAAI,EAAE;QAC7CC,MAAM,EAAEhB,QAAQ,CAACgB,MAAM;QACvBC,WAAW,EAAEjB,QAAQ,CAACkB;MACxB,CAAC;IAAA,CAAC,CAAC;IACH;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED,eAAetC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}